@{
    @using AssetManager.Api;
    @using AssetManager.Api.Attributes;
    @using AssetManager.Api.Attributes.Types;
    @using AssetManager.Web.Models;

    Layout = "_Content";
    @model AddAssetModel;
    ViewData["Title"] = "Add new " + @Model.Asset.AssetType + " asset";
}

<script src="~/static/compiled_ts/AssetAdder.js"></script>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Creating new @Model.Asset.AssetType
            </div>
            <div class="panel-body">
                <noscript class="alert alert-danger">
                    JavaScript required to add Assets.
                </noscript>
                <script>
                    let adder = new AssetAdder("@Model.AssetType.DatabaseId", @Model.AssetTypeId, 0); // 0 to represent we are adding a new one.
                </script>

                @foreach ( IAttributeType attrType in @Model.AssetType.AttributeTypes )
                {
                    <div class="form-group">
                        @switch ( attrType.AttributeType )
                        {
                            case AttributeTypes.AssetName:
                            {
                                AssetNameAttributeType type = (AssetNameAttributeType)attrType;
                                AssetNameAttribute attr = Model.Asset.CloneAttributeAsType<AssetNameAttribute>( type.Key );

                                var model = new AddEditAttributeModel<AssetNameAttributeType, AssetNameAttribute>(type, attr, false);
                                <partial name="~/Views/ReadWriteAssetAttributes/_AssetNameAttribute.cshtml" model="model" />
                                break;
                            }

                            case AttributeTypes.Integer:
                            {
                                IntegerAttributeType type = (IntegerAttributeType)attrType;
                                IntegerAttribute attr = Model.Asset.CloneAttributeAsType<IntegerAttribute>( type.Key );

                                var model = new AddEditAttributeModel<IntegerAttributeType, IntegerAttribute>(type, attr, false);
                                <partial name="~/Views/ReadWriteAssetAttributes/_IntegerAttribute.cshtml" model="model" />
                                break;
                            }

                            case AttributeTypes.StringAttribute:
                            {
                                StringAttributeType type = (StringAttributeType)attrType;
                                StringAttribute attr = Model.Asset.CloneAttributeAsType<StringAttribute>( type.Key );

                                var model = new AddEditAttributeModel<StringAttributeType, StringAttribute>(type, attr, false);
                                <partial name="~/Views/ReadWriteAssetAttributes/_StringAttribute.cshtml" model="model" />
                                break;
                            }

                            case AttributeTypes.ImageUrl:
                            {
                                ImageUrlAttributeType type = (ImageUrlAttributeType)attrType;
                                ImageUrlAttribute attr = Model.Asset.CloneAttributeAsType<ImageUrlAttribute>( type.Key );

                                var model = new AddEditAttributeModel<ImageUrlAttributeType, ImageUrlAttribute>(type, attr, false);
                                <partial name="~/Views/ReadWriteAssetAttributes/_ImageUrlAttribute.cshtml" model="model"/>
                                break;
                            }

                            default:
                                throw new NotImplementedException( attrType.AttributeType + " not implemented yet." );
                        }
                    </div>
                }
                <div class="btn-group">
                    <button id="addAssetButton" class="btn btn-success" type="button" onclick="adder.Submit()"><i class="fa fa-plus"></i> Add Asset</button>
                </div>
            </div>
        </div>
    </div>
</div>