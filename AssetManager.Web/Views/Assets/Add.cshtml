@{
    @using AssetManager.Api;
    @using AssetManager.Api.Attributes;
    @using AssetManager.Api.Attributes.Types;

    Layout = "_Content";
    @model AssetModel;
    ViewData["Title"] = "Add new " + @Model.Asset.AssetType + " asset";
}

<script src="~/static/compiled_ts/AssetAdder.js"></script>
<script>
    let adder = new AssetAdder();
</script>

@foreach ( IAttributeType attrType in @Model.AssetType.AttributeTypes )
{
    switch ( attrType.AttributeType )
    {
        case AttributeTypes.AssetName:
        {
            AssetNameAttributeType type = (AssetNameAttributeType)attrType;
            AssetNameAttribute attr = Model.Asset.CloneAttributeAsType<AssetNameAttribute>( type.Key );
            Tuple<AssetNameAttributeType, AssetNameAttribute> model = new Tuple<AssetNameAttributeType, AssetNameAttribute>( type, attr );
            <partial name="~/Views/ReadWriteAssetAttributes/_AssetNameAttribute.cshtml" model="model" />
            break;
        }

        case AttributeTypes.Integer:
        {
            IntegerAttributeType type = (IntegerAttributeType)attrType;
            IntegerAttribute attr = Model.Asset.CloneAttributeAsType<IntegerAttribute>( type.Key );
            Tuple<IntegerAttributeType, IntegerAttribute> model = new Tuple<IntegerAttributeType, IntegerAttribute>( type, attr );
            <partial name="~/Views/ReadWriteAssetAttributes/_IntegerAttribute.cshtml" model="model" />
            break;
        }

        case AttributeTypes.StringAttribute:
        {
            StringAttributeType type = (StringAttributeType)attrType;
            StringAttribute attr = Model.Asset.CloneAttributeAsType<StringAttribute>( type.Key );
            Tuple<StringAttributeType, StringAttribute> model = new Tuple<StringAttributeType, StringAttribute>( type, attr );
            <partial name="~/Views/ReadWriteAssetAttributes/_StringAttribute.cshtml" model="model" />
            break;
        }

        default:
            throw new NotImplementedException( attrType.AttributeType + " not implemented yet." );
    }
}
