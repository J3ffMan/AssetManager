@{
    @using AssetManager.Api.Attributes;
    @using AssetManager.Api.Attributes.Types;
    @model AddEditAttributeModel<IntegerAttributeType, IntegerAttribute>;

    IntegerAttributeType typeInfo = @Model.AttributeType;
    IntegerAttribute attributeInfo = @Model.Attribute;

    string escapedKey = typeInfo.EscapeKey();
}

<label><i class="fa fa-caret-right"></i> @typeInfo.Key@if ( typeInfo.Required ) {<span style="color:darkred;"> *</span>}</label>
<input id="integer_@escapedKey"
       class="form-control"
       type="number"
       @if ( typeInfo.MinValue.HasValue )
       {
           @:min="@typeInfo.MinValue.Value"
       }
       @if ( typeInfo.MaxValue.HasValue )
       {
           @:max="@typeInfo.MaxValue.Value"
       }

       @if ( @Model.IsEditing )
       {
           @:value="@attributeInfo.Value"
       }
       else
       {
           @:value="@typeInfo.DefaultValue"
       }

       name="@typeInfo.Key"
/>

<div id="integer_@(escapedKey)_error"></div>

<script>
    let intAttributeType_@escapedKey = new IntegerAttributeTypeInfo();
    intAttributeType_@(escapedKey).SetMin(@(typeInfo.MinValue.HasValue ? typeInfo.MinValue.ToString() : "null"))
    .SetMax(@(typeInfo.MaxValue.HasValue ? typeInfo.MaxValue.ToString() : "null"))
    .SetDefault(@(typeInfo.DefaultValue.HasValue ? typeInfo.DefaultValue.ToString() : "null" ))
    .SetRequired(@typeInfo.Required.ToString().ToLower());

    let intAttribute_@(escapedKey) = new IntegerAttribute(intAttributeType_@(escapedKey), "@typeInfo.Key");

    let intUrlHtmlMapper_@(escapedKey) = new IntegerHtmlToAttribute(
        document.getElementById("integer_@escapedKey"),
        document.getElementById("integer_@(escapedKey)_error"),
        intAttribute_@(escapedKey)
    );

    adder.AddAttribute(intUrlHtmlMapper_@(escapedKey).GetMapper());
</script>