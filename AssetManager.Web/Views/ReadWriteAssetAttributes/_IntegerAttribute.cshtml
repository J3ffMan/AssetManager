@{
    @using AssetManager.Api.Attributes;
    @using AssetManager.Api.Attributes.Types;
    @model Tuple<IntegerAttributeType, IntegerAttribute>;

    IntegerAttributeType typeInfo = @Model.Item1;
    IntegerAttribute attributeInfo = @Model.Item2;

    string escapedKey = typeInfo.EscapeKey();
}

<script>
    let intAttributeType_@escapedKey = new IntegerAttributeTypeInfo();
    intAttributeType_@(escapedKey).SetMin(@(typeInfo.MinValue.HasValue ? typeInfo.MinValue.ToString() : "null"))
    .SetMax(@(typeInfo.MaxValue.HasValue ? typeInfo.MaxValue.ToString() : "null"))
    .SetDefault(@(typeInfo.DefaultValue.HasValue ? typeInfo.DefaultValue.ToString() : "null" ))
    .SetRequired(@typeInfo.Required.ToString().ToLower());

    let intAttribute_@(escapedKey) = new IntegerAttribute(intAttributeType_@(escapedKey));
    adder.AddAttribute(intAttribute_@(escapedKey));
</script>


<label><i class="fa fa-caret-right"></i> @typeInfo.Key: </label>
<input id="number_@escapedKey"
       class="form-control"
       type="number"
       @if ( typeInfo.MinValue.HasValue )
       {
           @:min="@typeInfo.MinValue.Value"
       }
       @if ( typeInfo.MaxValue.HasValue )
       {
           @:max="@typeInfo.MaxValue.Value"
       }
       value="@attributeInfo.Value"
       onchange="intAttribute_@(escapedKey).SetValue(Number.parseInt(this.value))"
/>